# Generated by Django 4.2.8 on 2023-12-12 15:37

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields

from django.conf import settings

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# cdi_forms.migrations.0039_populate_choice_model
# cdi_forms.migrations.0041_repopulate_instruments
# cdi_forms.migrations.0043_add_combined_items_table
# cdi_forms.migrations.0045_add_french_to_choices_model
# cdi_forms.migrations.0048_auto_20190328_1545
# cdi_forms.migrations.0050_auto_20190328_1634
# cdi_forms.migrations.0054_choices_choice_set_en_ca_data
# cdi_forms.migrations.0056_choices_choice_set_nl
# cdi_forms.migrations.0064_choices_choice_set_he
# cdi_forms.migrations.0066_choices_choice_set_ko
# cdi_forms.migrations.0080_update_choice_model
# cdi_forms.migrations.0088_alter_backgroundinfo_sibling_count

'''
def set_caregiver_other(apps, schema_editor):
    BackgoundInfo = apps.get_model('cdi_forms', 'backgroundinfo')
    for row in BackgoundInfo.objects.all():
        row.primary_caregiver = 'mother'
        row.primary_caregiver_other = 'Pre Form Filler Field'
        row.secondary_caregiver = 'father'
        row.secondary_caregiver_other = 'Pre Form Filler Field'
        row.save()
        
def remove_negatives(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    BackgoundInfo = apps.get_model('cdi_forms', 'backgroundinfo')
    backgrounds = BackgroundInfo.objects.filter(sibling_count__lt=0)
    backgrounds.update(sibling_count=0)


def set_form_filler_other(apps, schema_editor):
    BackgoundInfo = apps.get_model('cdi_forms', 'backgroundinfo')
    for row in BackgoundInfo.objects.all():
        row.form_filler_other = 'Pre Form Filler Field'
        row.save()

def set_form_filler_other(apps, schema_editor):
    BackgoundInfo = apps.get_model('cdi_forms', 'backgroundinfo')
    for row in BackgoundInfo.objects.all():
        row.form_filler_other = 'Pre Form Filler Field'
        row.save()

def populateChoiceModel(apps, schema_editor):
    
    PROJECT_ROOT = settings.BASE_DIR
    choices_csv_path = os.path.realpath(PROJECT_ROOT + '/cdi_form_csv/choice_options.csv')

    Choices = apps.get_model('cdi_forms', 'Choices')

    choices_data=pd.read_csv(choices_csv_path, sep=',').fillna('')
    choice_fields = [f.name for f in Choices._meta.get_fields()]

    for index, row in choices_data.iterrows():
        data_dict = dict(row)
        sub_dict = {k: data_dict.get(k, None) for k in set.intersection(set(data_dict.keys()), set(choice_fields))}
        sub_dict.pop('choice_set', None)
        Choices.objects.update_or_create(choice_set=row['choice_set'], defaults = sub_dict)

def addChoicesLink(apps, schema_editor):

    instrument_models = ['English_WS', 'English_WG']

    Choices = apps.get_model('cdi_forms', 'Choices')

    for curr_model in instrument_models:
        Instrument_model = apps.get_model('cdi_forms', curr_model)

        for curr_item in Instrument_model.objects.exclude(choices__isnull=True).exclude(choices__exact=''):
            choices_link, created = Choices.objects.get_or_create(choice_set = curr_item.choices)
            curr_item.choices_link = choices_link
            curr_item.save()

import csv, json, os, re, string
from django.core.exceptions import FieldError

def unicode_csv_reader(utf8_data, dialect=csv.excel, **kwargs):
    csv_reader = csv.reader(utf8_data, dialect=dialect, **kwargs)
    for row in csv_reader:
        yield [cell for cell in row]

def populate_instrument(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    input_instruments = json.load(open(os.path.realpath(PROJECT_ROOT + '/static/json/instruments.json')))
    var_safe = lambda s: ''.join([c for c in '_'.join(s.split()) if c in string.ascii_letters + string.digits + '_'])
    instrument = apps.get_model('researcher_UI', 'instrument')
    instrument_fields = [f.name for f in instrument._meta.get_fields()]

    for curr_instrument in input_instruments:

        instrument_language = curr_instrument['language']
        instrument_form = curr_instrument['form']
        instrument_verbose_name = curr_instrument['verbose_name']

        instrument_name = var_safe(instrument_language) + '_' + var_safe(instrument_form)

        instrument_min_age = curr_instrument['min_age']
        instrument_max_age = curr_instrument['max_age']

        data_dict = {'language': instrument_language,
                     'form': instrument_form,
                     'verbose_name': instrument_verbose_name,
                     'min_age': instrument_min_age,
                     'max_age': instrument_max_age}

        sub_dict = {k: data_dict.get(k, None) for k in set.intersection(set(data_dict.keys()), set(instrument_fields))}

        # try except added so it works
        try: instrument_obj, created = instrument.objects.update_or_create(name = instrument_name, defaults=sub_dict,)
        except: pass

def populate_items(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    input_instruments = json.load(open(os.path.realpath(PROJECT_ROOT + '/static/json/instruments.json')))
    instrument = apps.get_model('researcher_UI', 'instrument')
    var_safe = lambda s: ''.join([c for c in '_'.join(s.split()) if c in string.ascii_letters + string.digits + '_'])

    try:
        Choices = apps.get_model('cdi_forms', 'Choices')
    except LookupError:
        Choices = None

    for curr_instrument in input_instruments:

        instrument_language, instrument_form = curr_instrument['language'], curr_instrument['form']
        instrument_name = var_safe(instrument_language) + '_' + var_safe(instrument_form)

        try:
            instrument_obj = instrument.objects.get(form=instrument_form, language=instrument_language)
        except FieldError:
            instrument_obj = instrument.objects.get(name=instrument_name)

        # try except add so migration works
        try: instrument_model = apps.get_model(app_label='cdi_forms', model_name=instrument_obj.name)
        except: break

        ftype = curr_instrument['csv_file'].split('.')[-1]

        if ftype == 'csv':

            contents = list(unicode_csv_reader(open(os.path.realpath(PROJECT_ROOT + '/' + curr_instrument['csv_file']), encoding="utf8")))
            col_names = contents[0]
            nrows = len(contents)
            get_row = lambda row: contents[row]
        else:
            raise IOError("Instrument file must be a CSV.")

        for row in range(1, nrows):
            row_values = get_row(row)
            if len(row_values) > 1:
                itemID = row_values[col_names.index('itemID')]
                item = row_values[col_names.index('item')]
                item_type = row_values[col_names.index('item_type')]
                item_category = row_values[col_names.index('category')]
                item_choices = row_values[col_names.index('choices')]
                choices_key = None
                if item_type not in ['combination_examples']:
                    try:
                        if Choices:
                            choices_key = Choices.objects.get(choice_set_en = item_choices)
                        else:
                            choices_key = item_choices
                    except:
                        raise IOError("Can't find choice set %s in model for %s (%s)" % (item_category, itemID, item_choices, ))

                definition = row_values[col_names.index('definition')]
                gloss = row_values[col_names.index('gloss')]
                if 'complexity_category' in col_names:
                    complexity_category = row_values[col_names.index('complexity_category')]
                else:
                    complexity_category = None

                if 'uni_lemma' in col_names:
                    uni_lemma = row_values[col_names.index('uni_lemma')]
                else:
                    uni_lemma = None

                data_dict = {'item': item,
                             'item_type': item_type,
                             'category': item_category,
                             'choices': choices_key,
                             'definition': definition,
                             'gloss': gloss,
                             'complexity_category': complexity_category,
                             'uni_lemma': uni_lemma}

                cdi_item, created = instrument_model.objects.update_or_create(itemID = itemID, defaults=data_dict,)


def fixItemOrders(apps, schema_editor):
    administration_data = apps.get_model('researcher_UI', 'administration_data')

    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_292').update(item_ID='item_XXX')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_293').update(item_ID='item_292')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_XXX').update(item_ID='item_293')

    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_282').update(item_ID='item_YYY')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_283').update(item_ID='item_282')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_YYY').update(item_ID='item_283')

    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_131').update(item_ID='item_ZZZ')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_132').update(item_ID='item_131')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_ZZZ').update(item_ID='item_132')

def reverseItemOrders(apps, schema_editor):
    administration_data = apps.get_model('researcher_UI', 'administration_data')

    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_293').update(item_ID='item_XXX')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_292').update(item_ID='item_293')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_XXX').update(item_ID='item_292')

    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_283').update(item_ID='item_YYY')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_282').update(item_ID='item_283')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_YYY').update(item_ID='item_282')

    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_132').update(item_ID='item_ZZZ')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_131').update(item_ID='item_132')
    administration_data.objects.filter(administration__study__instrument__name = 'English_WS', 
        item_ID='item_ZZZ').update(item_ID='item_131')


def populate_items2(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    input_instruments = json.load(open(os.path.realpath(PROJECT_ROOT + '/static/json/instruments.json')))
    instrument = apps.get_model('researcher_UI', 'instrument')
    var_safe = lambda s: ''.join([c for c in '_'.join(s.split()) if c in string.ascii_letters + string.digits + '_'])

    try:
        Choices = apps.get_model('cdi_forms', 'Choices')
    except LookupError:
        Choices = None

    for curr_instrument in input_instruments:

        instrument_language, instrument_form = curr_instrument['language'], curr_instrument['form']
        instrument_name = var_safe(instrument_language) + '_' + var_safe(instrument_form)
        print ("    Populating items for", instrument_language, instrument_form)

        if instrument.objects.filter(form=instrument_form, language=instrument_language).exists():
            instrument_obj = instrument.objects.get(form=instrument_form, language=instrument_language)
        elif instrument.objects.filter(name=instrument_name).exists():
            instrument_obj = instrument.objects.get(name=instrument_name)
        else:
            continue

        instrument_forms = apps.get_model(app_label='cdi_forms', model_name='Instrument_Forms')

        ftype = curr_instrument['csv_file'].split('.')[-1]

        if ftype == 'csv':

            contents = list(unicode_csv_reader(open(os.path.realpath(PROJECT_ROOT + '/' + curr_instrument['csv_file']), encoding="utf-8")))
            col_names = contents[0]
            nrows = len(contents)
            get_row = lambda row: contents[row]
        else:
            raise IOError("Instrument file must be a CSV.")

        for row in range(1, nrows):
            row_values = get_row(row)
            if len(row_values) > 1:
                itemID = row_values[col_names.index('itemID')]
                item = row_values[col_names.index('item')]
                item_type = row_values[col_names.index('item_type')]
                item_category = row_values[col_names.index('category')]
                item_choices = row_values[col_names.index('choices')]
                choices_key = None
                #if item_type not in ['combination_examples']:
                if not 'examples' in item_type:
                    try:
                        if Choices:
                            choices_key = Choices.objects.get(choice_set_en = item_choices)
                        else:
                            choices_key = item_choices
                    except:
                        raise IOError("Can't find choice set %s in model for %s (%s)" % (item_category, itemID, item_choices, ))

                definition = row_values[col_names.index('definition')]
                gloss = row_values[col_names.index('gloss')]
                if 'complexity_category' in col_names:
                    complexity_category = row_values[col_names.index('complexity_category')]
                else:
                    complexity_category = None

                if 'uni_lemma' in col_names:
                    uni_lemma = row_values[col_names.index('uni_lemma')]
                else:
                    uni_lemma = None

                data_dict = {'item': item,
                             'item_type': item_type,
                             'category': item_category,
                             'choices': choices_key,
                             'definition': definition,
                             'gloss': gloss,
                             'complexity_category': complexity_category,
                             'uni_lemma': uni_lemma}

                instrument_forms.objects.update_or_create(instrument = instrument_obj, itemID = itemID, defaults=data_dict,)

def updateChoiceModel(apps, schema_editor):
    
    PROJECT_ROOT = settings.BASE_DIR
    choices_csv_path = os.path.realpath(PROJECT_ROOT + '/cdi_form_csv/choice_options.csv')

    Choices = apps.get_model('cdi_forms', 'Choices')

    choices_data=pd.read_csv(choices_csv_path, sep=',').fillna('')
    choice_fields = [f.name for f in Choices._meta.get_fields()]

    for index, row in choices_data.iterrows():
        data_dict = dict(row)
        sub_dict = {k: data_dict.get(k, None) for k in set.intersection(set(data_dict.keys()), set(choice_fields))}
        sub_dict.pop('choice_set', None)
        Choices.objects.update_or_create(choice_set=row['choice_set'], defaults = sub_dict)
'''

class Migration(migrations.Migration):

    replaces = [('cdi_forms', '0001_initial'), ('cdi_forms', '0002_backgroundinfo'), ('cdi_forms', '0003_backgroundinfo_administration'), ('cdi_forms', '0004_auto_20150921_1549'), ('cdi_forms', '0005_auto_20150921_1550'), ('cdi_forms', '0006_auto_20150921_1706'), ('cdi_forms', '0007_auto_20150921_1706'), ('cdi_forms', '0008_remove_backgroundinfo_born_on_due_date'), ('cdi_forms', '0009_backgroundinfo_born_on_due_date'), ('cdi_forms', '0010_remove_backgroundinfo_born_on_due_date'), ('cdi_forms', '0011_backgroundinfo_born_on_due_date'), ('cdi_forms', '0012_auto_20151019_1640'), ('cdi_forms', '0013_auto_20151019_1641'), ('cdi_forms', '0014_auto_20151019_1641'), ('cdi_forms', '0015_requests_log'), ('cdi_forms', '0016_auto_20151019_1750'), ('cdi_forms', '0017_english_wg'), ('cdi_forms', '0018_auto_20151026_1840'), ('cdi_forms', '0019_auto_20151026_1840'), ('cdi_forms', '0020_auto_20160202_2346'), ('cdi_forms', '0021_auto_20160205_0713'), ('cdi_forms', '0022_auto_20160205_0746'), ('cdi_forms', '0023_auto_20160205_0919'), ('cdi_forms', '0024_auto_20160206_2101'), ('cdi_forms', '0025_auto_20161021_0137'), ('cdi_forms', '0026_auto_20161116_1820'), ('cdi_forms', '0027_auto_20161116_1907'), ('cdi_forms', '0028_auto_20161118_0033'), ('cdi_forms', '0029_auto_20161122_0236'), ('cdi_forms', '0030_auto_20170105_0124'), ('cdi_forms', '0031_auto_20170201_2315'), ('cdi_forms', '0032_backgroundinfo_zip_code'), ('cdi_forms', '0033_auto_20170508_2005'), ('cdi_forms', '0034_auto_20170515_2147'), ('cdi_forms', '0035_auto_20170519_2027'), ('cdi_forms', '0036_auto_20170823_2324'), ('cdi_forms', '0037_split_birthweight_into_us_and_si_units'), ('cdi_forms', '0038_add_choices_model'), ('cdi_forms', '0039_populate_choice_model'), ('cdi_forms', '0040_replace_choices_field'), ('cdi_forms', '0041_repopulate_instruments'), ('cdi_forms', '0042_rename_caregiver_choices'), ('cdi_forms', '0043_add_combined_items_table'), ('cdi_forms', '0044_remove_original_items_tables'), ('cdi_forms', '0045_add_french_to_choices_model'), ('cdi_forms', '0046_instrument_forms_add_item_order'), ('cdi_forms', '0047_add_countryfield'), ('cdi_forms', '0048_auto_20190328_1545'), ('cdi_forms', '0049_auto_20190328_1608'), ('cdi_forms', '0050_auto_20190328_1634'), ('cdi_forms', '0051_auto_20190329_1423'), ('cdi_forms', '0052_auto_20190408_0940'), ('cdi_forms', '0053_choices_choice_set_en_ca'), ('cdi_forms', '0054_choices_choice_set_en_ca_data'), ('cdi_forms', '0055_instrument_forms_scoring_category'), ('cdi_forms', '0056_choices_choice_set_nl'), ('cdi_forms', '0057_auto_20190801_1606'), ('cdi_forms', '0058_auto_20190801_1612'), ('cdi_forms', '0059_auto_20190801_1616'), ('cdi_forms', '0060_auto_20190801_1624'), ('cdi_forms', '0061_auto_20190802_1443'), ('cdi_forms', '0062_auto_20190929_0735'), ('cdi_forms', '0063_auto_20191004_1238'), ('cdi_forms', '0064_choices_choice_set_he'), ('cdi_forms', '0065_auto_20200120_0806'), ('cdi_forms', '0066_auto_20200329_1019'), ('cdi_forms', '0067_auto_20200416_0954'), ('cdi_forms', '0068_auto_20200420_0633'), ('cdi_forms', '0066_choices_choice_set_ko'), ('cdi_forms', '0067_merge_20200407_0700'), ('cdi_forms', '0068_auto_20200409_1841'), ('cdi_forms', '0069_merge_20200421_0638'), ('cdi_forms', '0070_backgroundinfo_caregiver_other'), ('cdi_forms', '0071_backgroundinfo_prolific_pid'), ('cdi_forms', '0072_auto_20200506_1029'), ('cdi_forms', '0069_auto_20200413_0757'), ('cdi_forms', '0070_merge_20200421_0708'), ('cdi_forms', '0071_choices_choice_set_ko'), ('cdi_forms', '0073_merge_20200610_0733'), ('cdi_forms', '0074_catstartingword'), ('cdi_forms', '0075_auto_20200726_0749'), ('cdi_forms', '0076_auto_20210122_0825'), ('cdi_forms', '0077_auto_20210122_0927'), ('cdi_forms', '0078_auto_20210122_0952'), ('cdi_forms', '0079_auto_20210413_1904'), ('cdi_forms', '0080_update_choice_model'), ('cdi_forms', '0081_auto_20210728_1006'), ('cdi_forms', '0082_auto_20210728_1041'), ('cdi_forms', '0083_auto_20220308_0702'), ('cdi_forms', '0084_choices_choice_set_fr'), ('cdi_forms', '0085_auto_20230303_1432'), ('cdi_forms', '0086_alter_backgroundinfo_generic_health_question'), ('cdi_forms', '0087_auto_20230309_1630'), ('cdi_forms', '0088_alter_backgroundinfo_sibling_count'), ('cdi_forms', '0089_auto_20230629_1856'), ('cdi_forms', '0090_backgroundinfo_event_id')]

    initial = True

    dependencies = [
        ('researcher_UI', '0053_study_backpage_boolean'),
        ('researcher_UI', '0006_auto_20150921_0719'),
        ('researcher_UI', '0026_build_researcher_model'),
        ('researcher_UI', '0049_instrumentscore_scoring_measures'),
    ]

    operations = [
        migrations.CreateModel(
            name='requests_log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_hash', models.CharField(max_length=128)),
                ('request_type', models.CharField(max_length=4)),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Zipcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_code', models.CharField(max_length=5)),
                ('zip_prefix', models.CharField(max_length=3)),
                ('population', models.IntegerField()),
                ('state', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Spanish_WG',
            fields=[
                ('itemID', models.CharField(max_length=101, primary_key=True, serialize=False)),
                ('item', models.CharField(max_length=101)),
                ('item_type', models.CharField(max_length=101)),
                ('category', models.CharField(max_length=101)),
                ('choices', models.CharField(max_length=101, null=True)),
                ('definition', models.CharField(blank=True, max_length=201, null=True)),
                ('uni_lemma', models.CharField(blank=True, max_length=101, null=True)),
                ('gloss', models.CharField(blank=True, max_length=101, null=True)),
                ('complexity_category', models.CharField(blank=True, max_length=101, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Spanish_WS',
            fields=[
                ('itemID', models.CharField(max_length=101, primary_key=True, serialize=False)),
                ('item', models.CharField(max_length=101)),
                ('item_type', models.CharField(max_length=101)),
                ('category', models.CharField(max_length=101)),
                ('choices', models.CharField(max_length=101, null=True)),
                ('definition', models.CharField(blank=True, max_length=201, null=True)),
                ('uni_lemma', models.CharField(blank=True, max_length=101, null=True)),
                ('gloss', models.CharField(blank=True, max_length=101, null=True)),
                ('complexity_category', models.CharField(blank=True, max_length=101, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BackgroundInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.IntegerField(default=999, validators=[django.core.validators.MinValueValidator(0)], verbose_name=b'Age (in months)')),
                ('sex', models.CharField(choices=[(b'M', b'Male'), (b'F', b'Female'), (b'O', b'Other')], max_length=1)),
                ('early_or_late', models.CharField(blank=True, choices=[(b'early', b'Early'), (b'late', b'Late')], max_length=5, null=True, verbose_name=b'Was he/she early or late?')),
                ('due_date_diff', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, b'Number of weeks cannot be less than 1')], verbose_name=b'By how many weeks? (round to the nearest week)')),
                ('mother_yob', models.IntegerField(choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (0, b'Prefer not to disclose')], verbose_name=b'Mother / Parent or Guardian 1 Year of birth')),
                ('mother_education', models.IntegerField(choices=[(5, b'5'), (6, b'6'), (7, b'7'), (8, b'8'), (9, b'9'), (10, b'10'), (11, b'11'), (12, b'12 (High school graduate)'), (13, b'13'), (14, b'14'), (15, b'15'), (16, b'16 (College graduate)'), (17, b'17'), (18, b'18 (Advanced degree)'), (19, b'19'), (20, b'20'), (21, b'21'), (22, b'22'), (23, b'23 or more'), (0, b'Prefer not to disclose')], help_text=b'Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', verbose_name=b'Mother / Parent or Guardian 1 Education')),
                ('father_yob', models.IntegerField(choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (0, b'Prefer not to disclose')], verbose_name=b'Father / Parent or Guardian 2 Year of birth')),
                ('father_education', models.IntegerField(choices=[(5, b'5'), (6, b'6'), (7, b'7'), (8, b'8'), (9, b'9'), (10, b'10'), (11, b'11'), (12, b'12 (High school graduate)'), (13, b'13'), (14, b'14'), (15, b'15'), (16, b'16 (College graduate)'), (17, b'17'), (18, b'18 (Advanced degree)'), (19, b'19'), (20, b'20'), (21, b'21'), (22, b'22'), (23, b'23 or more'), (0, b'Prefer not to disclose')], help_text=b'Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', verbose_name=b'Father / Parent or Guardian 2 Education')),
                ('annual_income', models.CharField(choices=[(b'<25000', b'Under $25,000'), (b'25000-50000', b'$25,000-$50,000'), (b'50000-75000', b'$50,000-$75,000'), (b'75000-100000', b'$75,000-$100,000'), (b'100000-125000', b'$100,000-$125,000'), (b'125000-150000', b'$125,000-$150,000'), (b'150000-175000', b'$150,000-$175,000'), (b'175000-200000', b'$175,000-$200,000'), (b'>200000', b'Over $200,000'), (b'Prefer not to disclose', b'Prefer not to disclose')], max_length=30, verbose_name=b'Estimated Annual Family Income (in USD)')),
                ('child_hispanic_latino', models.NullBooleanField(verbose_name=b'Is your child Hispanic or Latino?')),
                ('language_from', models.CharField(blank=True, max_length=50, null=True, verbose_name=b'From whom?')),
                ('language_days_per_week', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(7, b'Number of days per week cannot exceed 7'), django.core.validators.MinValueValidator(1, b'Number of days per week cannot be less than 1')], verbose_name=b'How many days per week is the child exposed to these languages?')),
                ('language_hours_per_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(24, b'Number of hours per day cannot exceed 24'), django.core.validators.MinValueValidator(1, b'Number of hours per day cannot be less than 1')], verbose_name=b'How many hours per day is the child exposed to these languages?')),
                ('ear_infections', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Has your child undergone interventions (e.g., tubes)?  Please describe')),
                ('hearing_loss', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Please describe')),
                ('vision_problems', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Please describe')),
                ('illnesses', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Please describe')),
                ('services', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Please describe')),
                ('worried', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Please describe')),
                ('learning_disability', models.CharField(blank=True, max_length=1001, null=True, verbose_name=b'Indicate which family member and provide a description')),
                ('administration', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='researcher_UI.administration')),
                ('child_ethnicity', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1), blank=True, null=True, size=None)),
                ('other_languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=101), blank=True, null=True, size=None)),
                ('birth_order', models.IntegerField(choices=[(1, b'1 (First)'), (2, b'2 (Second)'), (3, b'3 (Third)'), (4, b'4 (Fourth)'), (5, b'5 (Fifth)'), (6, b'6 (Sixth)'), (7, b'7 (Seventh)'), (8, b'8 (Eighth)'), (9, b'9 (Ninth)'), (10, b'10 or more (Tenth or Later)'), (0, b'Prefer not to disclose')], verbose_name=b'Birth order')),
                ('birth_weight_lb', models.FloatField(blank=True, choices=[(1.0, b'Less than 3 lbs, 0 oz'), (3.0, b'3 lbs, 0 oz - 3 lbs, 7 oz'), (3.5, b'3 lbs, 8 oz - 3 lbs, 15 oz'), (4.0, b'4 lbs, 0 oz - 4 lbs, 7 oz'), (4.5, b'4 lbs, 8 oz - 4 lbs, 15 oz'), (5.0, b'5 lbs, 0 oz - 5 lbs, 7 oz'), (5.5, b'5 lbs, 8 oz - 5 lbs, 15 oz'), (6.0, b'6 lbs, 0 oz - 6 lbs, 7 oz'), (6.5, b'6 lbs, 8 oz - 6 lbs, 15 oz'), (7.0, b'7 lbs, 0 oz - 7 lbs, 7 oz'), (7.5, b'7 lbs, 8 oz - 7 lbs, 15 oz'), (8.0, b'8 lbs, 0 oz - 8 lbs, 7 oz'), (8.5, b'8 lbs, 8 oz - 8 lbs, 15 oz'), (9.0, b'9 lbs, 0 oz - 9 lbs, 7 oz'), (9.5, b'9 lbs, 8 oz - 9 lbs, 15 oz'), (10.0, b'10 lbs, 0 oz or more'), (0.0, b'Prefer not to disclose')], null=True, verbose_name=b'Birth weight')),
                ('born_on_due_date', models.IntegerField(verbose_name=b'Was your child born earlier or later than their due date?')),
                ('caregiver_info', models.IntegerField(choices=[(2, b'Two parents'), (1, b'One parent'), (3, b'One parent plus other caregiver (e.g., grandparent)'), (4, b'Other caregivers (e.g., grandparent or grandparents)'), (0, b'Prefer not to disclose')], verbose_name=b'Who does your child live with?')),
                ('ear_infections_boolean', models.IntegerField(verbose_name=b'Has your child experienced chronic ear infections (5 or more)? ')),
                ('hearing_loss_boolean', models.IntegerField(verbose_name=b'Do you suspect that your child may have hearing loss?')),
                ('illnesses_boolean', models.IntegerField(verbose_name=b'Has your child had any major illnesses, hospitalizations, or diagnosed disabilities?')),
                ('learning_disability_boolean', models.IntegerField(verbose_name=b'Have you or anyone in your immediate family been diagnosed with a language or learning disability?')),
                ('other_languages_boolean', models.IntegerField()),
                ('services_boolean', models.IntegerField(verbose_name=b'Has your child ever received any services for speech, language, or development issues?')),
                ('vision_problems_boolean', models.IntegerField(verbose_name=b'Is there some reason to suspect that your child may have vision problems?')),
                ('worried_boolean', models.IntegerField(verbose_name=b"Are you worried about your child's progress in language or communication?")),
                ('zip_code', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message=b'Please enter a valid U.S. zip code', regex=b'^(\\d{3}([*]{2})?)|([A-Z]{2})$')], verbose_name=b'Zip Code (if you live in the U.S.)')),
                ('multi_birth', models.IntegerField(blank=True, choices=[(2, b'Twins'), (3, b'Triplets'), (4, b'Quadruplets'), (5, b'Quintuplets or greater')], null=True, verbose_name=b'Twins, triplets, quadruplets, other?')),
                ('multi_birth_boolean', models.IntegerField(default=2, verbose_name=b'Was your child born as part of a multiple birth?')),
                ('birth_weight_kg', models.FloatField(blank=True, choices=[(1.0, b'Less than 1500 grams'), (1.5, b'1500 grams - 1749 grams'), (1.75, b'1750 grams - 1999 grams'), (2.0, b'2000 grams - 2249 grams'), (2.25, b'2250 grams - 2499 grams'), (2.5, b'2500 grams - 2749 grams'), (2.75, b'2750 grams - 2999 grams'), (3.0, b'3000 grams - 3249 grams'), (3.25, b'3250 grams - 3499 grams'), (3.5, b'3500 grams - 3749 grams'), (3.75, b'3750 grams - 3999 grams'), (4.0, b'4000 grams - 4249 grams'), (4.25, b'4250 grams - 4499 grams'), (4.5, b'4500 grams - 4749 grams'), (4.75, b'4750 grams - 4999 grams'), (5.0, b'5000 grams or more'), (0.0, b'Prefer not to disclose')], null=True, verbose_name=b'Birth weight')),
            ],
        ),
        migrations.CreateModel(
            name='Choices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_set', models.CharField(max_length=101)),
                ('choice_set_en', models.CharField(max_length=101, null=True)),
                ('choice_set_es', models.CharField(max_length=101, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='English_WG',
            fields=[
                ('itemID', models.CharField(max_length=101, primary_key=True, serialize=False)),
                ('item', models.CharField(max_length=101)),
                ('item_type', models.CharField(max_length=101)),
                ('category', models.CharField(max_length=101)),
                ('choices', models.CharField(max_length=101)),
                ('uni_lemma', models.CharField(blank=True, max_length=101, null=True)),
                ('definition', models.CharField(blank=True, max_length=1001, null=True)),
                ('gloss', models.CharField(blank=True, max_length=1001, null=True)),
                ('complexity_category', models.CharField(blank=True, max_length=101, null=True)),
                ('choices_link', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cdi_forms.choices')),
            ],
        ),
        migrations.CreateModel(
            name='English_WS',
            fields=[
                ('itemID', models.CharField(max_length=101, primary_key=True, serialize=False)),
                ('item', models.CharField(max_length=101)),
                ('item_type', models.CharField(max_length=101)),
                ('category', models.CharField(max_length=101)),
                ('choices', models.CharField(max_length=101, null=True)),
                ('definition', models.CharField(blank=True, max_length=1001, null=True)),
                ('gloss', models.CharField(blank=True, max_length=1001, null=True)),
                ('complexity_category', models.CharField(blank=True, max_length=101, null=True)),
                ('choices_link', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cdi_forms.choices')),
                ('uni_lemma', models.CharField(blank=True, max_length=101, null=True)),
            ],
        ),
        #migrations.RunPython(
        #    code=populateChoiceModel,
        #),
        #migrations.RunPython(
        #    code=addChoicesLink,
        #),
        migrations.RemoveField(
            model_name='english_wg',
            name='choices',
        ),
        migrations.RemoveField(
            model_name='english_ws',
            name='choices',
        ),
        migrations.RenameField(
            model_name='english_wg',
            old_name='choices_link',
            new_name='choices',
        ),
        migrations.RenameField(
            model_name='english_ws',
            old_name='choices_link',
            new_name='choices',
        ),
        migrations.AlterField(
            model_name='spanish_wg',
            name='choices',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cdi_forms.choices'),
        ),
        migrations.AlterField(
            model_name='spanish_wg',
            name='definition',
            field=models.CharField(blank=True, max_length=1001, null=True),
        ),
        migrations.AlterField(
            model_name='spanish_wg',
            name='gloss',
            field=models.CharField(blank=True, max_length=1001, null=True),
        ),
        migrations.AlterField(
            model_name='spanish_ws',
            name='choices',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cdi_forms.choices'),
        ),
        migrations.AlterField(
            model_name='spanish_ws',
            name='definition',
            field=models.CharField(blank=True, max_length=1001, null=True),
        ),
        migrations.AlterField(
            model_name='spanish_ws',
            name='gloss',
            field=models.CharField(blank=True, max_length=1001, null=True),
        ),
        #migrations.RunPython(
        #    code=populate_instrument,
        #),
        #migrations.RunPython(
        #    code=populate_items,
        #),
        #migrations.RunPython(
        #    code=fixItemOrders,
        #    reverse_code=reverseItemOrders,
        #),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='caregiver_info',
            field=models.IntegerField(choices=[(2, 'Two parents'), (1, 'One parent'), (3, 'One or both parents and other caregiver(s) (e.g., grandparent)'), (4, 'Other caregivers (e.g., grandparent or grandparents)'), (0, 'Prefer not to disclose')], verbose_name='Who does your child live with?'),
        ),
        migrations.CreateModel(
            name='Instrument_Forms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemID', models.CharField(db_index=True, max_length=101)),
                ('item', models.CharField(max_length=101)),
                ('item_type', models.CharField(max_length=101)),
                ('category', models.CharField(max_length=101)),
                ('definition', models.CharField(blank=True, max_length=1001, null=True)),
                ('gloss', models.CharField(blank=True, max_length=1001, null=True)),
                ('complexity_category', models.CharField(blank=True, max_length=101, null=True)),
                ('uni_lemma', models.CharField(blank=True, max_length=101, null=True)),
                ('choices', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='cdi_forms.choices')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researcher_UI.instrument')),
            ],
            options={
                'unique_together': {('instrument', 'itemID')},
            },
        ),
        #migrations.RunPython(
        #    code=populate_items2,
        #),
        migrations.RemoveField(
            model_name='english_ws',
            name='choices',
        ),
        migrations.RemoveField(
            model_name='spanish_wg',
            name='choices',
        ),
        migrations.RemoveField(
            model_name='spanish_ws',
            name='choices',
        ),
        migrations.DeleteModel(
            name='English_WG',
        ),
        migrations.DeleteModel(
            name='English_WS',
        ),
        migrations.DeleteModel(
            name='Spanish_WG',
        ),
        migrations.DeleteModel(
            name='Spanish_WS',
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_fr',
            field=models.CharField(max_length=101, null=True),
        ),
        #migrations.RunPython(
        #    code=updateChoiceModel,
        #),
        migrations.AddField(
            model_name='instrument_forms',
            name='item_order',
            field=models.IntegerField(default=999, validators=[django.core.validators.MinValueValidator(1)]),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='country',
            field=django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='Country'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='form_filler',
            field=models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('both parents', 'Both caregivers'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], default='other', max_length=20, verbose_name='Who is filling in the form?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='form_filler_other',
            field=models.CharField(blank=True, max_length=25, null=True, verbose_name='Please specify'),
        ),
        #migrations.RunPython(
        #    code=set_form_filler_other,
        #),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (2019, b'2019'), (0, 'Prefer not to disclose')], verbose_name='Father / Parent or Guardian 2 Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (2019, b'2019'), (0, 'Prefer not to disclose')], verbose_name='Mother / Parent or Guardian 1 Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='form_filler',
            field=models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('both parents', 'Both caregivers'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], max_length=20, verbose_name='Who is filling in the form?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='primary_caregiver',
            field=models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('both parents', 'Both caregivers'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], default='other', max_length=20, verbose_name='Primary Caregiver'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='primary_caregiver_other',
            field=models.CharField(blank=True, max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='secondary_caregiver',
            field=models.CharField(blank=True, choices=[('mother', 'Mother'), ('father', 'Father'), ('both parents', 'Both caregivers'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], max_length=20, null=True, verbose_name='Secondary Caregiver'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='secondary_caregiver_other',
            field=models.CharField(blank=True, max_length=25, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_education',
            field=models.IntegerField(blank=True, choices=[(5, b'5'), (6, b'6'), (7, b'7'), (8, b'8'), (9, b'9'), (10, b'10'), (11, b'11'), (12, '12 (High school graduate)'), (13, b'13'), (14, b'14'), (15, b'15'), (16, '16 (College graduate)'), (17, b'17'), (18, '18 (Advanced degree)'), (19, b'19'), (20, b'20'), (21, b'21'), (22, b'22'), (23, '23 or more'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Secondary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(blank=True, choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (2019, b'2019'), (0, 'Prefer not to disclose')], null=True, verbose_name='Secondary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='form_filler_other',
            field=models.CharField(blank=True, max_length=25, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(choices=[(5, b'5'), (6, b'6'), (7, b'7'), (8, b'8'), (9, b'9'), (10, b'10'), (11, b'11'), (12, '12 (High school graduate)'), (13, b'13'), (14, b'14'), (15, b'15'), (16, '16 (College graduate)'), (17, b'17'), (18, '18 (Advanced degree)'), (19, b'19'), (20, b'20'), (21, b'21'), (22, b'22'), (23, '23 or more'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', verbose_name='Primary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (2019, b'2019'), (0, 'Prefer not to disclose')], verbose_name='Primary Caregiver Year of birth'),
        ),
        #migrations.RunPython(
        #    code=set_caregiver_other,
        #),
        migrations.RenameField(
            model_name='choices',
            old_name='choice_set_fr',
            new_name='choice_set_fr_ca',
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='primary_caregiver',
            field=models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], max_length=20, verbose_name='Primary Caregiver'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='secondary_caregiver',
            field=models.CharField(blank=True, choices=[('mother', 'Mother'), ('father', 'Father'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], max_length=20, null=True, verbose_name='Secondary Caregiver'),
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_en_ca',
            field=models.CharField(max_length=101, null=True),
        ),
        #migrations.RunPython(
        #    code=updateChoiceModel,
        #),
        migrations.AddField(
            model_name='instrument_forms',
            name='scoring_category',
            field=models.CharField(blank=True, max_length=101, null=True),
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_nl',
            field=models.CharField(max_length=101, null=True),
        ),
        #migrations.RunPython(
        #    code=updateChoiceModel,
        #),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='illnesses_boolean',
            field=models.IntegerField(default=-1, verbose_name='Has your child had any major illnesses, hospitalizations, or diagnosed disabilities?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='learning_disability_boolean',
            field=models.IntegerField(default=-1, verbose_name='Have you or anyone in your immediate family been diagnosed with a language or learning disability?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='ear_infections_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Has your child experienced chronic ear infections (5 or more)? '),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='hearing_loss_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Do you suspect that your child may have hearing loss?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='illnesses_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Has your child had any major illnesses, hospitalizations, or diagnosed disabilities?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='learning_disability_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Have you or anyone in your immediate family been diagnosed with a language or learning disability?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='other_languages_boolean',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='services_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Has your child ever received any services for speech, language, or development issues?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='vision_problems_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Is there some reason to suspect that your child may have vision problems?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='worried_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name="Are you worried about your child's progress in language or communication?"),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='annual_income',
            field=models.CharField(blank=True, choices=[('<25000', 'Under $25,000'), ('25000-50000', '$25,000-$50,000'), ('50000-75000', '$50,000-$75,000'), ('75000-100000', '$75,000-$100,000'), ('100000-125000', '$100,000-$125,000'), ('125000-150000', '$125,000-$150,000'), ('150000-175000', '$150,000-$175,000'), ('175000-200000', '$175,000-$200,000'), ('>200000', 'Over $200,000'), ('Prefer not to disclose', 'Prefer not to disclose')], max_length=30, null=True, verbose_name='Estimated Annual Family Income (in USD)'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='birth_order',
            field=models.IntegerField(blank=True, choices=[(1, '1 (First)'), (2, '2 (Second)'), (3, '3 (Third)'), (4, '4 (Fourth)'), (5, '5 (Fifth)'), (6, '6 (Sixth)'), (7, '7 (Seventh)'), (8, '8 (Eighth)'), (9, '9 (Ninth)'), (10, '10 or more (Tenth or Later)'), (0, 'Prefer not to disclose')], null=True, verbose_name='Birth order'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='born_on_due_date',
            field=models.IntegerField(blank=True, null=True, verbose_name='Was your child born earlier or later than their due date?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='caregiver_info',
            field=models.IntegerField(blank=True, choices=[(2, 'Two parents'), (1, 'One parent'), (3, 'One or both parents and other caregiver(s) (e.g., grandparent)'), (4, 'Other caregivers (e.g., grandparent or grandparents)'), (0, 'Prefer not to disclose')], null=True, verbose_name='Who does your child live with?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='form_filler',
            field=models.CharField(blank=True, choices=[('mother', 'Mother'), ('father', 'Father'), ('both parents', 'Both caregivers'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], max_length=20, null=True, verbose_name='Who is filling in the form?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(blank=True, choices=[(5, b'5'), (6, b'6'), (7, b'7'), (8, b'8'), (9, b'9'), (10, b'10'), (11, b'11'), (12, '12 (High school graduate)'), (13, b'13'), (14, b'14'), (15, b'15'), (16, '16 (College graduate)'), (17, b'17'), (18, '18 (Advanced degree)'), (19, b'19'), (20, b'20'), (21, b'21'), (22, b'22'), (23, '23 or more'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Primary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(blank=True, choices=[(1950, b'1950'), (1951, b'1951'), (1952, b'1952'), (1953, b'1953'), (1954, b'1954'), (1955, b'1955'), (1956, b'1956'), (1957, b'1957'), (1958, b'1958'), (1959, b'1959'), (1960, b'1960'), (1961, b'1961'), (1962, b'1962'), (1963, b'1963'), (1964, b'1964'), (1965, b'1965'), (1966, b'1966'), (1967, b'1967'), (1968, b'1968'), (1969, b'1969'), (1970, b'1970'), (1971, b'1971'), (1972, b'1972'), (1973, b'1973'), (1974, b'1974'), (1975, b'1975'), (1976, b'1976'), (1977, b'1977'), (1978, b'1978'), (1979, b'1979'), (1980, b'1980'), (1981, b'1981'), (1982, b'1982'), (1983, b'1983'), (1984, b'1984'), (1985, b'1985'), (1986, b'1986'), (1987, b'1987'), (1988, b'1988'), (1989, b'1989'), (1990, b'1990'), (1991, b'1991'), (1992, b'1992'), (1993, b'1993'), (1994, b'1994'), (1995, b'1995'), (1996, b'1996'), (1997, b'1997'), (1998, b'1998'), (1999, b'1999'), (2000, b'2000'), (2001, b'2001'), (2002, b'2002'), (2003, b'2003'), (2004, b'2004'), (2005, b'2005'), (2006, b'2006'), (2007, b'2007'), (2008, b'2008'), (2009, b'2009'), (2010, b'2010'), (2011, b'2011'), (2012, b'2012'), (2013, b'2013'), (2014, b'2014'), (2015, b'2015'), (2016, b'2016'), (2017, b'2017'), (2018, b'2018'), (2019, b'2019'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='multi_birth_boolean',
            field=models.IntegerField(blank=True, null=True, verbose_name='Was your child born as part of a multiple birth?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='primary_caregiver',
            field=models.CharField(blank=True, choices=[('mother', 'Mother'), ('father', 'Father'), ('grandparent(s)', 'Grandparent(s)'), ('other', 'Other')], max_length=20, null=True, verbose_name='Primary Caregiver'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='sex',
            field=models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='annual_income',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Estimated Annual Family Income (in USD)'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='birth_weight_kg',
            field=models.FloatField(blank=True, null=True, verbose_name='Birth weight'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='birth_weight_lb',
            field=models.FloatField(blank=True, null=True, verbose_name='Birth weight'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='administration',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='researcher_UI.administration'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='age',
            field=models.IntegerField(default=999, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Age (in months)'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='child_hispanic_latino',
            field=models.NullBooleanField(verbose_name='Is your child Hispanic or Latino?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='due_date_diff',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, 'Number of weeks cannot be less than 1')], verbose_name='By how many weeks? (round to the nearest week)'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='ear_infections',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Has your child undergone interventions (e.g., tubes)?  Please describe'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='early_or_late',
            field=models.CharField(blank=True, choices=[('early', 'Early'), ('late', 'Late')], max_length=5, null=True, verbose_name='Was he/she early or late?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12 (High school graduate)'), (13, '13'), (14, '14'), (15, '15'), (16, '16 (College graduate)'), (17, '17'), (18, '18 (Advanced degree)'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23 or more'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Secondary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (0, 'Prefer not to disclose')], null=True, verbose_name='Secondary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='hearing_loss',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Please describe'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='illnesses',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Please describe'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='language_days_per_week',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(7, 'Number of days per week cannot exceed 7'), django.core.validators.MinValueValidator(1, 'Number of days per week cannot be less than 1')], verbose_name='How many days per week is the child exposed to these languages?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='language_from',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='From whom?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='language_hours_per_day',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(24, 'Number of hours per day cannot exceed 24'), django.core.validators.MinValueValidator(1, 'Number of hours per day cannot be less than 1')], verbose_name='How many hours per day is the child exposed to these languages?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='learning_disability',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Indicate which family member and provide a description'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12 (High school graduate)'), (13, '13'), (14, '14'), (15, '15'), (16, '16 (College graduate)'), (17, '17'), (18, '18 (Advanced degree)'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23 or more'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Primary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='multi_birth',
            field=models.IntegerField(blank=True, choices=[(2, 'Twins'), (3, 'Triplets'), (4, 'Quadruplets'), (5, 'Quintuplets or greater')], null=True, verbose_name='Twins, triplets, quadruplets, other?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='services',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Please describe'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='vision_problems',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Please describe'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='worried',
            field=models.CharField(blank=True, max_length=1001, null=True, verbose_name='Please describe'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='zip_code',
            field=models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Please enter a valid U.S. zip code', regex='^(\\d{3}([*]{2})?)|([A-Z]{2})$')], verbose_name='Zip Code (if you live in the U.S.)'),
        ),
        migrations.AlterField(
            model_name='instrument_forms',
            name='choices',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cdi_forms.choices'),
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_he',
            field=models.CharField(max_length=101, null=True),
        ),
        #migrations.RunPython(
        #    code=updateChoiceModel,
        #),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (0, 'Prefer not to disclose')], null=True, verbose_name='Secondary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='sibling_boolean',
            field=models.BooleanField(blank=True, null=True, verbose_name='Does you child have siblings?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='sibling_count',
            field=models.IntegerField(blank=True, null=True, verbose_name='How many siblings does you child have?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='sibling_data',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='mother_yob_confirmation',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='child_ethnicity',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1), blank=True, null=True, size=None, verbose_name="Child's Ethnicity"),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Secondary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Primary Caregiver Education'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='birth_weight_confirmation_lb',
            field=models.FloatField(blank=True, null=True, verbose_name='Birth weight'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='birth_weight_confirmation_kg',
            field=models.FloatField(blank=True, null=True, verbose_name='Birth weight'),
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_ko',
            field=models.CharField(max_length=101, null=True),
        ),
        #migrations.RunPython(
        #    code=updateChoiceModel,
        #),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='child_ethnicity',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1), blank=True, null=True, size=None, verbose_name="Child's Ethnicity"),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Secondary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Primary Caregiver Education'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='caregiver_other',
            field=models.CharField(blank=True, max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='source_id',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='zip_code',
            field=models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.RegexValidator(message='Please enter a valid U.S. zip code', regex='^(\\d{3}([*]{2})?)|([A-Z]{2}|\\d{4}([A-Z]{2}}))$')], verbose_name='Zip Code (if you live in the U.S.)'),
        ),
        migrations.RemoveField(
            model_name='choices',
            name='choice_set_ko',
        ),
        migrations.CreateModel(
            name='CatResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('administered_words', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=101), null=True, size=None)),
                ('administered_items', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('administered_responses', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(), null=True, size=None)),
                ('est_theta', models.FloatField(null=True)),
                ('administration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='researcher_UI.administration')),
            ],
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_ko',
            field=models.CharField(max_length=101, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (0, 'Prefer not to disclose')], null=True, verbose_name='Secondary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob_confirmation',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='child_asks_for_reading',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how many times per week does your child ask to be read to?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='child_asks_words_say',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how often does your child ask you what printed words say?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='read_at_home',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how many times per week do you read to your child at home?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='read_for_pleasure',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how often do you read for fun and pleasure?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='rhyming_games',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how often do you play rhyming games with your child?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='teach_alphbet',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how often do you try to teach your child the letters of the alphabet?'),
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_es_ar',
            field=models.CharField(max_length=101, null=True),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='child_self_reads',
            field=models.CharField(blank=True, choices=[('never', 'Never'), ('less than once/week', 'Less Than Once/Week'), ('once/week', 'Once/Week'), ('2-3 times/week', '2-3 Times/Week'), ('3-4 times/week', '3-4 Times/Week'), ('5-6 times/week', '5-6 Times/Week'), ('daily', 'Daily')], max_length=51, null=True, verbose_name='About how many times per week does your child look at books by themself?'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='children_comforted',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='Children should be comforted when they are scared or unhappy.'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='close_bonds',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='A child who has close bonds with his or her parents will have better relationships later on in life.'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='do_as_told',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='It is very important for young children to do as they are told, for example, waiting when they are told to wait.'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='explore_experiment',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='It is good to let children explore and experiment.'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='parents_help_learn',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='Parents can help babies learn language by talking to them.'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='play_learning',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='Babies can learn a lot just by playing.'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='show_respect',
            field=models.CharField(blank=True, choices=[('strongly disagree', 'Strongly Disagree'), ('disagree', 'Disagree'), ('somewhat disagree', 'Somewhat Disagree'), ('neither agree nor disagree', 'Neither Agree Nor Disagree'), ('somewhat agree', 'Somewhat Agree'), ('agree', 'Agree'), ('strongly agree', 'Strongly Agree')], max_length=51, null=True, verbose_name='It is very important that children learn to respect adults, such as parents and teachers.'),
        ),
        #migrations.RunPython(
        #    code=updateChoiceModel,
        #),
        migrations.AddField(
            model_name='backgroundinfo',
            name='place_of_residence',
            field=models.CharField(blank=True, max_length=51, null=True, verbose_name='Place of residence (neighnorhood/district)'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Secondary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Primary Caregiver Education'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='kindergarten_dpw',
            field=models.IntegerField(blank=True, null=True, verbose_name='Days per week'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='kindergarten_hpd',
            field=models.IntegerField(blank=True, null=True, verbose_name='Hours per day'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='kindergarten_since_when',
            field=models.CharField(blank=True, choices=[('Less than 6 months', 'Less than 6 months'), ('Between 6 and 12 months', 'Between 6 and 12 months'), ('More than 12 months', 'More than 12 months')], max_length=51, null=True, verbose_name='Since when'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='child_hispanic_latino',
            field=models.BooleanField(blank=True, null=True, verbose_name='Is your child Hispanic or Latino?'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (0, 'Prefer not to disclose')], null=True, verbose_name='Secondary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob_confirmation',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AddField(
            model_name='choices',
            name='choice_set_fr',
            field=models.CharField(max_length=101, null=True),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24'), (25, '25'), (26, '26'), (27, '27'), (28, '28'), (29, '29'), (30, '30'), (31, '31'), (32, '32'), (33, '33'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Secondary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='father_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (0, 'Prefer not to disclose')], null=True, verbose_name='Secondary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_education',
            field=models.IntegerField(blank=True, choices=[(5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24'), (25, '25'), (26, '26'), (27, '27'), (28, '28'), (29, '29'), (30, '30'), (31, '31'), (32, '32'), (33, '33'), (0, 'Prefer not to disclose')], help_text='Choose highest grade completed (12 = high school graduate; 16 = college graduate; 18 = advanced degree)', null=True, verbose_name='Primary Caregiver Education'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='mother_yob_confirmation',
            field=models.IntegerField(blank=True, choices=[(1950, '1950'), (1951, '1951'), (1952, '1952'), (1953, '1953'), (1954, '1954'), (1955, '1955'), (1956, '1956'), (1957, '1957'), (1958, '1958'), (1959, '1959'), (1960, '1960'), (1961, '1961'), (1962, '1962'), (1963, '1963'), (1964, '1964'), (1965, '1965'), (1966, '1966'), (1967, '1967'), (1968, '1968'), (1969, '1969'), (1970, '1970'), (1971, '1971'), (1972, '1972'), (1973, '1973'), (1974, '1974'), (1975, '1975'), (1976, '1976'), (1977, '1977'), (1978, '1978'), (1979, '1979'), (1980, '1980'), (1981, '1981'), (1982, '1982'), (1983, '1983'), (1984, '1984'), (1985, '1985'), (1986, '1986'), (1987, '1987'), (1988, '1988'), (1989, '1989'), (1990, '1990'), (1991, '1991'), (1992, '1992'), (1993, '1993'), (1994, '1994'), (1995, '1995'), (1996, '1996'), (1997, '1997'), (1998, '1998'), (1999, '1999'), (2000, '2000'), (2001, '2001'), (2002, '2002'), (2003, '2003'), (2004, '2004'), (2005, '2005'), (2006, '2006'), (2007, '2007'), (2008, '2008'), (2009, '2009'), (2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (0, 'Prefer not to disclose')], null=True, verbose_name='Primary Caregiver Year of birth'),
        ),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='sex',
            field=models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to respond')], max_length=1, null=True),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='generic_health_question',
            field=models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ("Don't know", "Don't know"), ('Prefer not to disclose', 'Prefer not to disclose')], max_length=151, null=True, verbose_name='Has your child been diagnosed with any troubles, for example, hearing, vision, speech, learning difficulty'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='primary_caregiver_occupation',
            field=models.CharField(blank=True, max_length=101, null=True, verbose_name='Primary caregiver occupation'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='primary_caregiver_occupation_description',
            field=models.CharField(blank=True, max_length=101, null=True, verbose_name='Primary caregiver occupation description'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='secondary_caregiver_occupation',
            field=models.CharField(blank=True, max_length=101, null=True, verbose_name='Secondary caregiver occupation'),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='secondary_caregiver_occupation_description',
            field=models.CharField(blank=True, max_length=101, null=True, verbose_name='Secondary caregiver occupation description'),
        ),
        #migrations.RunPython(
        #    code=remove_negatives,
        #),
        migrations.AlterField(
            model_name='backgroundinfo',
            name='sibling_count',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='How many siblings does you child have?'),
        ),
        migrations.AddField(
            model_name='instrument_forms',
            name='enable_response',
            field=models.CharField(blank=True, max_length=51, null=True),
        ),
        migrations.AddField(
            model_name='instrument_forms',
            name='enabler',
            field=models.CharField(blank=True, max_length=21, null=True),
        ),
        migrations.AddField(
            model_name='backgroundinfo',
            name='event_id',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
    ]
