# Generated by Django 3.2.18 on 2023-04-03 15:38

import json
import os
import string

from django.conf import settings
from django.db import migrations, models
from researcher_UI.models import Demographic, InstrumentFamily, Instrument


def add_families(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    families = json.load(
        open(
            os.path.realpath(PROJECT_ROOT + "/static/json/instrument_families.json"),
            encoding="utf8",
        )
    )

    for family in families:
        family_name = family["name"]

        print(f"Updating instrument table for {family_name}")

        data_dict = {"chargeable": family["chargeable"]}

        family_obj, created = InstrumentFamily.objects.update_or_create(
            name=family_name,
            defaults=data_dict,
        )

        if created:
            created = "created"
        else:
            created = "updated"

        print(f"{family_obj} {created}")


def update_instruments(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    instruments = json.load(
        open(
            os.path.realpath(PROJECT_ROOT + "/static/json/instruments.json"),
            encoding="utf8",
        )
    )
    var_safe = lambda s: "".join(
        [
            c
            for c in "_".join(s.split())
            if c in string.ascii_letters + string.digits + "_"
        ]
    )

    input_instruments = instruments

    for curr_instrument in input_instruments:
        instrument_language = curr_instrument["language"]
        instrument_form = curr_instrument["form"]
        instrument_verbose_name = curr_instrument["verbose_name"]

        print(
            "Updating instrument table for (%s %s)"
            % (instrument_language, instrument_form)
        )

        instrument_name = (
            var_safe(instrument_language) + "_" + var_safe(instrument_form)
        )

        instrument_min_age = curr_instrument["min_age"]
        instrument_max_age = curr_instrument["max_age"]

        family = InstrumentFamily.objects.get(name=curr_instrument["family"])

        data_dict = {
            "language": instrument_language,
            "form": instrument_form,
            "verbose_name": instrument_verbose_name,
            "min_age": instrument_min_age,
            "max_age": instrument_max_age,
            "family": family,
        }

        instrument_obj, created = Instrument.objects.update_or_create(
            name=instrument_name,
            defaults=data_dict,
        )

        try:
            for demo in curr_instrument["demographics"]:
                demographic, created = Demographic.objects.update_or_create(
                    name=demo, path="/form_data/background_info/" + demo
                )
                instrument_obj.demographics.add(demographic)
                print(f"    Added demographic {demographic}")
        except:
            print(f"    No demographic selections for {instrument_obj.name}")


class Migration(migrations.Migration):
    dependencies = [
        ("researcher_UI", "0069_instrument_family"),
        ("brookes", "0002_alter_brookescode_code"),
    ]

    operations = [
        migrations.AddField(
            model_name="researcher",
            name="allowed_instrument_families",
            field=models.ManyToManyField(
                blank=True,
                to="researcher_UI.InstrumentFamily",
                verbose_name="Instrument Families this researcher has access to",
            ),
        ),
        migrations.RunPython(add_families),
        migrations.RunPython(update_instruments),
    ]
