# Generated by Django 4.2.8 on 2023-12-12 15:33

import datetime
import json
import os
import string

import ckeditor.fields
import ckeditor_uploader.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.utils import timezone

"""
def populate_instrument(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    input_instruments = json.load(open(os.path.realpath(PROJECT_ROOT + '/static/json/instruments.json')))
    var_safe = lambda s: ''.join([c for c in '_'.join(s.split()) if c in string.ascii_letters + string.digits + '_'])
    Instrument = apps.get_model('researcher_UI', 'Instrument')
    instrument_fields = [f.name for f in Instrument._meta.get_fields()]

    for curr_instrument in input_instruments:

        instrument_language = curr_instrument['language']
        instrument_form = curr_instrument['form']
        instrument_verbose_name = curr_instrument['verbose_name']

        instrument_name = var_safe(instrument_language) + '_' + var_safe(instrument_form)

        instrument_min_age = curr_instrument['min_age']
        instrument_max_age = curr_instrument['max_age']

        data_dict = {'language': instrument_language,
                     'form': instrument_form,
                     'verbose_name': instrument_verbose_name,
                     'min_age': instrument_min_age,
                     'max_age': instrument_max_age}

        sub_dict = {k: data_dict.get(k, None) for k in set.intersection(set(data_dict.keys()), set(instrument_fields))}

        instrument_obj, created = Instrument.objects.update_or_create(name = instrument_name, defaults=sub_dict,)


def populateResearcherModel(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    file_path = PROJECT_ROOT + '/researcher_profiles.json'
    if os.path.exists(file_path):
        researcher_profiles = json.load(open(os.path.realpath(file_path)))

        researcher = apps.get_model('researcher_UI', 'Researcher')
        User = apps.get_model('auth', 'User')
        instrument = apps.get_model('researcher_UI', 'Instrument')

        english_instruments = instrument.objects.filter(language = 'English')

        for rp in researcher_profiles:
            if User.objects.filter(id = rp['user'], email = rp['email']).exists():
                user_obj = User.objects.get(id = rp['user'], email = rp['email'])
                researcher_obj, created = researcher.objects.get_or_create(user = user_obj)
                user_obj.first_name = rp['first_name']
                user_obj.last_name = rp['last_name']
                researcher_obj.institution = rp['institution']
                researcher_obj.position = rp['position']
                user_obj.save()
                if user_obj.is_staff:
                    researcher_obj.allowed_instruments.add(*instrument.objects.all())
                else:
                    researcher_obj.allowed_instruments.add(*english_instruments)
                researcher_obj.save()


def removeResearcherModel(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    researcher_profiles = json.load(open(os.path.realpath(PROJECT_ROOT + '/researcher_profiles.json')))

    researcher = apps.get_model('researcher_UI', 'Researcher')
    User = apps.get_model('auth', 'User')

    for rp in researcher_profiles:
        user_obj = User.objects.get(id = rp['user'], email = rp['email'])
        researcher.objects.filter(user = user_obj).delete()
        user_obj.first_name = ''
        user_obj.last_name = ''
        user_obj.save()

def populate_instrument2(apps, schema_editor):
        PROJECT_ROOT = settings.BASE_DIR
        input_instruments = json.load(open(os.path.realpath(PROJECT_ROOT + '/static/json/instruments.json'),encoding='utf8'))
        var_safe = lambda s: ''.join([c for c in '_'.join(s.split()) if c in string.ascii_letters + string.digits + '_'])

        for curr_instrument in input_instruments:

            instrument_language = curr_instrument['language']
            instrument_form = curr_instrument['form']
            instrument_verbose_name = curr_instrument['verbose_name']

            print ("1. Updating instrument table for (%s %s)" % (instrument_language, instrument_form))

            instrument_name = var_safe(instrument_language) + '_' + var_safe(instrument_form)

            instrument_min_age = curr_instrument['min_age']
            instrument_max_age = curr_instrument['max_age']

            data_dict = {'language': instrument_language,
                         'form': instrument_form,
                         'verbose_name': instrument_verbose_name,
                         'min_age': instrument_min_age,
                         'max_age': instrument_max_age}


            Instrument = apps.get_model('researcher_UI', 'Instrument')
            instrument_obj, created = Instrument.objects.update_or_create(name = instrument_name, defaults=data_dict,)

            Demographic = apps.get_model('researcher_UI', 'Demographic')
            try:
                for demo in curr_instrument['demographics']:
                    demographic, created = Demographic.objects.update_or_create(name=demo, path='/form_data/background_info/' + demo)
                    instrument_obj.demographics.add(demographic)
            except: 
                print(f'    No demographic selections for {instrument_obj.name}')

def add_families(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    families = json.load(
        open(
            os.path.realpath(PROJECT_ROOT + "/static/json/instrument_families.json"),
            encoding="utf8",
        )
    )

    for family in families:
        family_name = family["name"]

        print(f"2. Updating instrument table for {family_name}")

        data_dict = {"chargeable": family["chargeable"]}

        InstrumentFamily = apps.get_model('researcher_UI', 'InstrumentFamily')
        family_obj, created = InstrumentFamily.objects.update_or_create(
            name=family_name,
            defaults=data_dict,
        )

        if created:
            created = "created"
        else:
            created = "updated"

        print(f"{family_obj} {created}")


def update_instruments(apps, schema_editor):
    PROJECT_ROOT = settings.BASE_DIR
    instruments = json.load(
        open(
            os.path.realpath(PROJECT_ROOT + "/static/json/instruments.json"),
            encoding="utf8",
        )
    )
    var_safe = lambda s: "".join(
        [
            c
            for c in "_".join(s.split())
            if c in string.ascii_letters + string.digits + "_"
        ]
    )

    input_instruments = instruments

    for curr_instrument in input_instruments:
        instrument_language = curr_instrument["language"]
        instrument_form = curr_instrument["form"]
        instrument_verbose_name = curr_instrument["verbose_name"]

        print(f"3: Updating instrument table for {instrument_language}, {instrument_form}")

        instrument_name = (
            var_safe(instrument_language) + "_" + var_safe(instrument_form)
        )

        instrument_min_age = curr_instrument["min_age"]
        instrument_max_age = curr_instrument["max_age"]

        InstrumentFamily = apps.get_model('researcher_UI', 'InstrumentFamily')
        family = InstrumentFamily.objects.get(name=curr_instrument["family"])

        data_dict = {
            "language": instrument_language,
            "form": instrument_form,
            "verbose_name": instrument_verbose_name,
            "min_age": instrument_min_age,
            "max_age": instrument_max_age,
            "family": family,
        }

        Instrument = apps.get_model('researcher_UI', 'Instrument')
        instrument_obj, created = Instrument.objects.update_or_create(
            name=instrument_name,
            defaults=data_dict,
        )


        Demographic = apps.get_model('researcher_UI', 'Demographic')
        try:
            for demo in curr_instrument["demographics"]:
                demographic, created = Demographic.objects.update_or_create(
                    name=demo, path="/form_data/background_info/" + demo
                )
                instrument_obj.demographics.add(demographic)
                print(f"    Added demographic {demographic}")
        except:
            print(f"    No demographic selections for {instrument_obj.name}")

def update_researchers(apps, schema_editor):
    Researcher = apps.get_model('researcher_UI', 'Researcher')
    for researcher in Researcher.objects.all():
        for instrument in researcher.allowed_instruments.all():
            if (
                instrument.family
                and not instrument.family
                in researcher.allowed_instrument_families.all()
            ):
                try:
                    researcher.allowed_instrument_families.add(instrument.family)
                    if instrument.family.chargeable:
                        pass
                except Exception as e:
                    print(
                        f"Failed to add family for instrument {instrument} to {researcher.user}.  Error {e}"
                    )
"""


class Migration(migrations.Migration):

    replaces = [
        ("researcher_UI", "0001_initial"),
        ("researcher_UI", "0002_auto_20150910_0648"),
        ("researcher_UI", "0003_auto_20150910_0915"),
        ("researcher_UI", "0004_administration_completed"),
        ("researcher_UI", "0005_auto_20150915_0704"),
        ("researcher_UI", "0006_auto_20150921_0719"),
        ("researcher_UI", "0007_administration_completedbackgroundinfo"),
        ("researcher_UI", "0008_auto_20160205_1132"),
        ("researcher_UI", "0009_auto_20161208_2055"),
        ("researcher_UI", "0010_auto_20161208_2104"),
        ("researcher_UI", "0011_administration_page_number"),
        ("researcher_UI", "0012_administration_analysis"),
        ("researcher_UI", "0013_auto_20170221_1758"),
        ("researcher_UI", "0014_study_waiver"),
        ("researcher_UI", "0015_study_confirm_completion"),
        ("researcher_UI", "0016_auto_20170413_2139"),
        ("researcher_UI", "0017_auto_20170414_2219"),
        ("researcher_UI", "0018_auto_20170422_0146"),
        ("researcher_UI", "0019_auto_20170505_0444"),
        ("researcher_UI", "0020_study_test_period"),
        ("researcher_UI", "0021_ip_address"),
        ("researcher_UI", "0022_study_prefilled_data"),
        ("researcher_UI", "0023_auto_20171221_2253"),
        ("researcher_UI", "0024_study_birth_weight_units"),
        ("researcher_UI", "0025_study_show_feedback"),
        ("researcher_UI", "0026_build_researcher_model"),
        ("researcher_UI", "0027_study_active"),
        ("researcher_UI", "0028_administrationsummary"),
        ("researcher_UI", "0029_auto_20190524_0853"),
        ("researcher_UI", "0030_instrumentscore"),
        ("researcher_UI", "0031_auto_20190530_0807"),
        ("researcher_UI", "0032_instrumentscore_kind"),
        ("researcher_UI", "0033_auto_20190531_1158"),
        ("researcher_UI", "0034_benchmark"),
        ("researcher_UI", "0035_auto_20190602_1122"),
        ("researcher_UI", "0036_auto_20190621_0742"),
        ("researcher_UI", "0037_auto_20190801_1606"),
        ("researcher_UI", "0038_administration_completedsurvey"),
        ("researcher_UI", "0037_auto_20190805_0645"),
        ("researcher_UI", "0039_merge_20190812_1054"),
        ("researcher_UI", "0040_auto_20190929_0735"),
        ("researcher_UI", "0041_auto_20190929_0808"),
        ("researcher_UI", "0042_auto_20191004_1238"),
        ("researcher_UI", "0043_summarydata"),
        ("researcher_UI", "0044_study_timing"),
        ("researcher_UI", "0045_administration_opt_out"),
        ("researcher_UI", "0046_auto_20200329_1019"),
        ("researcher_UI", "0047_auto_20200409_1841"),
        ("researcher_UI", "0048_auto_20200409_1841"),
        ("researcher_UI", "0049_instrumentscore_scoring_measures"),
        ("researcher_UI", "0047_study_confirmation_questions"),
        ("researcher_UI", "0050_merge_20200421_0637"),
        ("researcher_UI", "0051_auto_20200501_0746"),
        ("researcher_UI", "0052_study_prolific_boolean"),
        ("researcher_UI", "0053_study_print_my_answers_boolean"),
        ("researcher_UI", "0054_auto_20200821_1132"),
        ("researcher_UI", "0053_study_backpage_boolean"),
        ("researcher_UI", "0055_merge_20200916_0933"),
        ("researcher_UI", "0056_auto_20201028_1009"),
        ("researcher_UI", "0057_auto_20201204_0933"),
        ("researcher_UI", "0058_study_demographics"),
        ("researcher_UI", "0059_auto_20201204_0953"),
        ("researcher_UI", "0060_populate_changed_study_demographics"),
        ("researcher_UI", "0061_auto_20210122_0838"),
        ("researcher_UI", "0062_auto_20210122_0844"),
        ("researcher_UI", "0063_auto_20210129_0748"),
        ("researcher_UI", "0064_auto_20210901_0556"),
        ("researcher_UI", "0065_auto_20220308_0702"),
        ("researcher_UI", "0066_auto_20221210_0644"),
        ("researcher_UI", "0067_auto_20230303_1432"),
        ("researcher_UI", "0068_instrumentfamily"),
        ("researcher_UI", "0069_instrument_family"),
        ("researcher_UI", "0070_researcher_allowed_instrument_families"),
        ("researcher_UI", "0071_alter_instrumentfamily_options"),
        ("researcher_UI", "0072_study_share_opt_out"),
        ("researcher_UI", "0073_auto_20230410_0638"),
        ("researcher_UI", "0074_administration_scored"),
        ("researcher_UI", "0075_auto_20230614_0806"),
        ("researcher_UI", "0075_alter_study_test_period"),
        ("researcher_UI", "0076_merge_20230807_0943"),
        ("researcher_UI", "0077_administration_is_active"),
        ("researcher_UI", "0078_study_direct_redirect_boolean"),
        ("researcher_UI", "0079_study_no_demographic_boolean"),
        ("researcher_UI", "0080_auto_20230816_0454"),
        ("researcher_UI", "0081_alter_researcher_allowed_instruments"),
        ("researcher_UI", "0082_auto_20230828_0541"),
        ("researcher_UI", "0083_auto_20230829_0506"),
        ("researcher_UI", "0084_auto_20230829_0557"),
        ("researcher_UI", "0085_auto_20230829_0611"),
        ("researcher_UI", "0086_auto_20230829_0631"),
        ("researcher_UI", "0087_auto_20230829_0640"),
        ("researcher_UI", "0088_auto_20230829_0801"),
        ("researcher_UI", "0089_alter_researcher_allowed_instruments"),
        ("researcher_UI", "0090_alter_researcher_allowed_instruments"),
        ("researcher_UI", "0091_auto_20230830_0634"),
        ("researcher_UI", "0092_auto_20230904_0714"),
        ("researcher_UI", "0093_auto_20230904_0715"),
        ("researcher_UI", "0094_auto_20230904_0938"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="instrument",
            fields=[
                (
                    "name",
                    models.CharField(max_length=51, primary_key=True, serialize=False),
                ),
                ("verbose_name", models.CharField(blank=True, max_length=51)),
                ("form", models.CharField(max_length=51)),
                ("language", models.CharField(max_length=51)),
                (
                    "max_age",
                    models.IntegerField(default=0, verbose_name=b"Maximum age"),
                ),
                (
                    "min_age",
                    models.IntegerField(default=0, verbose_name=b"Minimum age"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="study",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=51)),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="researcher_UI.instrument",
                    ),
                ),
                (
                    "researcher",
                    models.ForeignKey(
                        default=0,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("study_group", models.CharField(blank=True, max_length=51)),
            ],
            options={
                "unique_together": {("researcher", "name")},
            },
        ),
        migrations.CreateModel(
            name="administration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject_id", models.IntegerField()),
                (
                    "repeat_num",
                    models.IntegerField(verbose_name=b"Administration number"),
                ),
                ("url_hash", models.CharField(max_length=128, unique=True)),
                (
                    "study",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="researcher_UI.study",
                    ),
                ),
                ("completed", models.BooleanField(default=False)),
                ("due_date", models.DateTimeField(verbose_name=b"Expiration date")),
                (
                    "last_modified",
                    models.DateTimeField(
                        auto_now=True,
                        default=datetime.datetime(2015, 9, 15, 7, 4, 0, 582163),
                    ),
                ),
                ("completedBackgroundInfo", models.BooleanField(default=False)),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        default="1904-01-01",
                        verbose_name=b"Creation date",
                    ),
                ),
            ],
            options={
                "unique_together": {("study", "subject_id", "repeat_num")},
            },
        ),
        migrations.CreateModel(
            name="administration_data",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("item_ID", models.CharField(max_length=101)),
                ("value", models.CharField(max_length=200)),
                (
                    "administration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="researcher_UI.administration",
                    ),
                ),
            ],
            options={
                "unique_together": {("administration", "item_ID")},
            },
        ),
        # migrations.RunPython(
        #    code=populate_instrument,
        # ),
        migrations.AlterUniqueTogether(
            name="instrument",
            unique_together={("language", "form")},
        ),
        migrations.AddField(
            model_name="administration",
            name="page_number",
            field=models.IntegerField(default=0, verbose_name=b"Page number"),
        ),
        migrations.AddField(
            model_name="study",
            name="waiver",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="study",
            name="confirm_completion",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="administration",
            name="analysis",
            field=models.NullBooleanField(
                default=None, verbose_name=b"Confirmed Age and Completion"
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="anon_collection",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="study",
            name="subject_cap",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="study",
            name="allow_payment",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="study",
            name="allow_sharing",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="payment_code",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hash_id", models.CharField(max_length=128, null=True, unique=True)),
                (
                    "added_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name=b"Date code was added to database",
                    ),
                ),
                (
                    "assignment_date",
                    models.DateTimeField(
                        null=True, verbose_name=b"Date code was given to participant"
                    ),
                ),
                ("payment_type", models.CharField(max_length=50)),
                (
                    "gift_amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name=b"Monetary value"
                    ),
                ),
                ("gift_code", models.CharField(max_length=50)),
                (
                    "study",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="researcher_UI.study",
                    ),
                ),
            ],
            options={
                "unique_together": {("payment_type", "gift_code")},
            },
        ),
        migrations.AddField(
            model_name="administration",
            name="bypass",
            field=models.NullBooleanField(
                default=None, verbose_name=b"Willing to forgo payment"
            ),
        ),
        migrations.AddField(
            model_name="administration",
            name="include",
            field=models.NullBooleanField(
                default=True, verbose_name=b"Include for eventual analysis"
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="test_period",
            field=models.IntegerField(
                default=14,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(14),
                ],
            ),
        ),
        migrations.CreateModel(
            name="ip_address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.CharField(max_length=30)),
                (
                    "date_added",
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name=b"Date IP address was added to database",
                    ),
                ),
                (
                    "study",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="researcher_UI.study",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="study",
            name="prefilled_data",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="study",
            name="max_age",
            field=models.IntegerField(
                blank=True, null=True, verbose_name=b"Maximum age"
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="min_age",
            field=models.IntegerField(
                blank=True, null=True, verbose_name=b"Minimum age"
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="birth_weight_units",
            field=models.CharField(default=b"lb", max_length=5),
        ),
        migrations.AddField(
            model_name="study",
            name="show_feedback",
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name="researcher",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "institution",
                    models.CharField(
                        max_length=101, verbose_name=b"Name of Institution"
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        max_length=101, verbose_name=b"Position in Institution"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "allowed_instruments",
                    models.ManyToManyField(
                        to="researcher_UI.instrument",
                        verbose_name="Instruments this researcher has access to",
                    ),
                ),
            ],
        ),
        # migrations.RunPython(
        #    code=populateResearcherModel,
        #    reverse_code=removeResearcherModel,
        # ),
        migrations.AddField(
            model_name="study",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name="AdministrationSummary",
            fields=[],
            options={
                "verbose_name": "Administration Summary",
                "proxy": True,
                "verbose_name_plural": "Administration Summary",
                "indexes": [],
            },
            bases=("researcher_UI.administration",),
        ),
        migrations.AlterField(
            model_name="study",
            name="test_period",
            field=models.IntegerField(
                default=14,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(28),
                ],
            ),
        ),
        migrations.CreateModel(
            name="InstrumentScore",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=101)),
                ("category", models.CharField(max_length=101)),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="researcher_UI.instrument",
                    ),
                ),
                ("order", models.IntegerField(default=999)),
                (
                    "kind",
                    models.CharField(
                        choices=[("count", "count"), ("list", "list")],
                        default="count",
                        max_length=5,
                    ),
                ),
                ("scoring_measures", models.CharField(default=1, max_length=101)),
            ],
            options={
                "ordering": ["instrument", "order"],
            },
        ),
        migrations.AlterField(
            model_name="researcher",
            name="allowed_instruments",
            field=models.ManyToManyField(
                blank=True,
                to="researcher_UI.instrument",
                verbose_name="Instruments this researcher has access to",
            ),
        ),
        migrations.AddField(
            model_name="administration",
            name="completedSurvey",
            field=models.BooleanField(default=False, verbose_name="Completed Survey"),
        ),
        migrations.CreateModel(
            name="Benchmark",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("percentile", models.IntegerField()),
                ("age", models.IntegerField()),
                ("raw_score", models.IntegerField()),
                ("raw_score_boy", models.IntegerField()),
                ("raw_score_girl", models.IntegerField()),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="researcher_UI.instrument",
                    ),
                ),
                (
                    "instrument_score",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="researcher_UI.instrumentscore",
                    ),
                ),
            ],
            options={
                "ordering": ["instrument_score", "age", "percentile"],
            },
        ),
        migrations.AddField(
            model_name="administration",
            name="local_lab_id",
            field=models.CharField(blank=True, max_length=101, null=True),
        ),
        migrations.AlterField(
            model_name="study",
            name="waiver",
            field=ckeditor.fields.RichTextField(blank=True),
        ),
        migrations.AlterField(
            model_name="study",
            name="waiver",
            field=ckeditor_uploader.fields.RichTextUploadingField(blank=True),
        ),
        migrations.AlterField(
            model_name="administration",
            name="analysis",
            field=models.NullBooleanField(
                default=None, verbose_name="Confirmed Age and Completion"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="bypass",
            field=models.NullBooleanField(
                default=None, verbose_name="Willing to forgo payment"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="created_date",
            field=models.DateTimeField(auto_now_add=True, verbose_name="Creation date"),
        ),
        migrations.AlterField(
            model_name="administration",
            name="due_date",
            field=models.DateTimeField(verbose_name="Expiration date"),
        ),
        migrations.AlterField(
            model_name="administration",
            name="include",
            field=models.NullBooleanField(
                default=True, verbose_name="Include for eventual analysis"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="page_number",
            field=models.IntegerField(default=0, verbose_name="Page number"),
        ),
        migrations.AlterField(
            model_name="administration",
            name="repeat_num",
            field=models.IntegerField(verbose_name="Administration number"),
        ),
        migrations.AlterField(
            model_name="administration",
            name="study",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="researcher_UI.study"
            ),
        ),
        migrations.AlterField(
            model_name="administration_data",
            name="administration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="researcher_UI.administration",
            ),
        ),
        migrations.AlterField(
            model_name="instrument",
            name="max_age",
            field=models.IntegerField(verbose_name="Maximum age"),
        ),
        migrations.AlterField(
            model_name="instrument",
            name="min_age",
            field=models.IntegerField(verbose_name="Minimum age"),
        ),
        migrations.AlterField(
            model_name="ip_address",
            name="date_added",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="Date IP address was added to database"
            ),
        ),
        migrations.AlterField(
            model_name="ip_address",
            name="study",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="researcher_UI.study"
            ),
        ),
        migrations.AlterField(
            model_name="payment_code",
            name="added_date",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="Date code was added to database"
            ),
        ),
        migrations.AlterField(
            model_name="payment_code",
            name="assignment_date",
            field=models.DateTimeField(
                null=True, verbose_name="Date code was given to participant"
            ),
        ),
        migrations.AlterField(
            model_name="payment_code",
            name="gift_amount",
            field=models.DecimalField(
                decimal_places=2, max_digits=6, verbose_name="Monetary value"
            ),
        ),
        migrations.AlterField(
            model_name="payment_code",
            name="study",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="researcher_UI.study"
            ),
        ),
        migrations.AlterField(
            model_name="researcher",
            name="institution",
            field=models.CharField(max_length=101, verbose_name="Name of Institution"),
        ),
        migrations.AlterField(
            model_name="researcher",
            name="position",
            field=models.CharField(
                max_length=101, verbose_name="Position in Institution"
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="birth_weight_units",
            field=models.CharField(default="lb", max_length=5),
        ),
        migrations.AlterField(
            model_name="study",
            name="instrument",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="researcher_UI.instrument",
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="max_age",
            field=models.IntegerField(
                blank=True, null=True, verbose_name="Maximum age"
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="min_age",
            field=models.IntegerField(
                blank=True, null=True, verbose_name="Minimum age"
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="researcher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="SummaryData",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("value", models.CharField(max_length=255)),
                (
                    "administration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="researcher_UI.administration",
                    ),
                ),
            ],
            options={
                "ordering": ["administration"],
                "unique_together": {("administration", "title")},
            },
        ),
        migrations.AddField(
            model_name="study",
            name="timing",
            field=models.IntegerField(default=6),
        ),
        migrations.AddField(
            model_name="administration",
            name="opt_out",
            field=models.NullBooleanField(
                default=None, verbose_name="Participant opted out of broader sharing"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="completedBackgroundInfo",
            field=models.BooleanField(
                default=False, verbose_name="Completed Background Info (P1)"
            ),
        ),
        migrations.CreateModel(
            name="Measure",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=51)),
                ("value", models.IntegerField(default=1)),
                (
                    "instrument_score",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="researcher_UI.instrumentscore",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="study",
            name="confirmation_questions",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="study",
            name="redirect_boolean",
            field=models.BooleanField(
                default=False,
                verbose_name="Provide redirect button at completion of study?",
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="redirect_url",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="study",
            name="prolific_boolean",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="study",
            name="print_my_answers_boolean",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="administration_data",
            name="value",
            field=models.CharField(max_length=600),
        ),
        migrations.AddField(
            model_name="study",
            name="backpage_boolean",
            field=models.BooleanField(
                default=True,
                help_text="When selected the final demographics page will be shown - deselect to not show the final page",
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="end_message_text",
            field=ckeditor_uploader.fields.RichTextUploadingField(
                blank=True, null=True
            ),
        ),
        migrations.CreateModel(
            name="Demographic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                ("path", models.CharField(max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name="study",
            name="end_message",
            field=models.CharField(
                choices=[
                    ("standard", "Standard"),
                    ("bespoke", "Custom"),
                    ("combined", "Combined"),
                ],
                default="standard",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="instrument",
            name="demographics",
            field=models.ManyToManyField(to="researcher_UI.demographic"),
        ),
        migrations.AddField(
            model_name="study",
            name="demographic",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="researcher_UI.demographic",
            ),
        ),
        # migrations.RunPython(
        #    code=populate_instrument2,
        # ),
        migrations.RenameField(
            model_name="study",
            old_name="prolific_boolean",
            new_name="participant_source_boolean",
        ),
        migrations.AlterField(
            model_name="study",
            name="participant_source_boolean",
            field=models.IntegerField(
                choices=[(0, "None"), (1, "Prolific"), (2, "Centiment")], default=0
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="redirect_url",
            field=models.URLField(
                blank=True,
                help_text="Enter the basic return URL - the Centiment aid will be added automatically",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="append_source_id_to_redirect",
            field=models.BooleanField(
                default=False, verbose_name="Append source_id to redirect URL?"
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="source_id_url_parameter_key",
            field=models.CharField(
                blank=True, max_length=51, null=True, verbose_name="URL parameter key"
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="participant_source_boolean",
            field=models.IntegerField(
                choices=[
                    (0, "None"),
                    (1, "Prolific"),
                    (2, "Centiment"),
                    (3, "RedCap"),
                    (4, "Lookit"),
                    (5, "Mturk"),
                    (99, "Other"),
                ],
                default=0,
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="redirect_url",
            field=models.URLField(
                blank=True, help_text="Please enter redirect URL", null=True
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="hide_source_id",
            field=models.BooleanField(
                default=False, verbose_name="Hide source id from parents/participants?"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="analysis",
            field=models.BooleanField(
                default=None, null=True, verbose_name="Confirmed Age and Completion"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="bypass",
            field=models.BooleanField(
                default=None, null=True, verbose_name="Willing to forgo payment"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="include",
            field=models.BooleanField(
                default=True, null=True, verbose_name="Include for eventual analysis"
            ),
        ),
        migrations.AlterField(
            model_name="administration",
            name="opt_out",
            field=models.BooleanField(
                default=None,
                null=True,
                verbose_name="Participant opted out of broader sharing",
            ),
        ),
        migrations.AlterModelOptions(
            name="instrument",
            options={"ordering": ["language", "form", "name"]},
        ),
        migrations.AddField(
            model_name="instrument",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="study",
            name="participant_source_boolean",
            field=models.IntegerField(
                choices=[
                    (0, "None"),
                    (1, "Prolific"),
                    (2, "Centiment"),
                    (3, "RedCap"),
                    (4, "Lookit"),
                    (5, "Mturk"),
                    (6, "Qualtrics"),
                    (99, "Other"),
                ],
                default=0,
            ),
        ),
        migrations.AlterModelOptions(
            name="instrument",
            options={"ordering": ["verbose_name"]},
        ),
        migrations.AlterField(
            model_name="study",
            name="waiver",
            field=ckeditor_uploader.fields.RichTextUploadingField(
                blank=True, verbose_name="Opening Dialog Box"
            ),
        ),
        migrations.CreateModel(
            name="InstrumentFamily",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=51)),
                ("chargeable", models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name="instrument",
            name="family",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="researcher_UI.instrumentfamily",
            ),
        ),
        migrations.AddField(
            model_name="researcher",
            name="allowed_instrument_families",
            field=models.ManyToManyField(
                blank=True,
                to="researcher_UI.instrumentfamily",
                verbose_name="Instrument Families this researcher has access to",
            ),
        ),
        # migrations.RunPython(
        #    code=add_families,
        # ),
        # migrations.RunPython(
        #    code=update_instruments,
        # ),
        migrations.AlterModelOptions(
            name="instrumentfamily",
            options={
                "ordering": ["name"],
                "verbose_name_plural": "Instrument Families",
            },
        ),
        migrations.AddField(
            model_name="study",
            name="share_opt_out",
            field=models.BooleanField(
                default=False,
                help_text="For chargeable instruments you may opt out of sharing the study data.  Selecting this will have no impact on non-chargeable instruments",
            ),
        ),
        # migrations.RunPython(
        #    code=update_researchers,
        # ),
        migrations.AddField(
            model_name="study",
            name="demographic_opt_out",
            field=models.BooleanField(
                default=False,
                help_text="For chargeable instruments you may opt out of collecting demographic data.",
            ),
        ),
        migrations.AlterField(
            model_name="study",
            name="share_opt_out",
            field=models.BooleanField(
                default=False,
                help_text="For chargeable instruments you may opt out of sharing the study data.",
            ),
        ),
        migrations.AddField(
            model_name="administration",
            name="scored",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="benchmark",
            name="raw_score",
            field=models.FloatField(),
        ),
        migrations.AlterField(
            model_name="benchmark",
            name="raw_score_boy",
            field=models.FloatField(),
        ),
        migrations.AlterField(
            model_name="benchmark",
            name="raw_score_girl",
            field=models.FloatField(),
        ),
        migrations.AlterField(
            model_name="study",
            name="test_period",
            field=models.IntegerField(
                default=14,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(1095),
                ],
            ),
        ),
        migrations.AddField(
            model_name="administration",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="study",
            name="direct_redirect_boolean",
            field=models.BooleanField(
                default=True,
                help_text="Deselect this if the redirect url calls an API to get the actual redirect url",
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="send_completion_flag_url",
            field=models.URLField(
                blank=True, help_text="Send completion flag to URL", null=True
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="no_demographic_boolean",
            field=models.BooleanField(
                default=False,
                help_text="You must include DOB, age offset and sex in the Link URL",
            ),
        ),
        migrations.AddField(
            model_name="administration",
            name="completed_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="study",
            name="json_redirect",
            field=models.JSONField(
                blank=True, help_text="Enter redirect json here", null=True
            ),
        ),
        migrations.AddField(
            model_name="study",
            name="completion_data",
            field=models.JSONField(
                blank=True,
                help_text="Data to be included in the completion url.",
                max_length=255,
                null=True,
            ),
        ),
    ]
